// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tz.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tz_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tz_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tz_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tz_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tz_2eproto;
namespace tz {
class ClientPacket;
struct ClientPacketDefaultTypeInternal;
extern ClientPacketDefaultTypeInternal _ClientPacket_default_instance_;
class ClientPacket_Data;
struct ClientPacket_DataDefaultTypeInternal;
extern ClientPacket_DataDefaultTypeInternal _ClientPacket_Data_default_instance_;
class ServerStatistic;
struct ServerStatisticDefaultTypeInternal;
extern ServerStatisticDefaultTypeInternal _ServerStatistic_default_instance_;
class ServerStatistic_Statistic;
struct ServerStatistic_StatisticDefaultTypeInternal;
extern ServerStatistic_StatisticDefaultTypeInternal _ServerStatistic_Statistic_default_instance_;
}  // namespace tz
PROTOBUF_NAMESPACE_OPEN
template<> ::tz::ClientPacket* Arena::CreateMaybeMessage<::tz::ClientPacket>(Arena*);
template<> ::tz::ClientPacket_Data* Arena::CreateMaybeMessage<::tz::ClientPacket_Data>(Arena*);
template<> ::tz::ServerStatistic* Arena::CreateMaybeMessage<::tz::ServerStatistic>(Arena*);
template<> ::tz::ServerStatistic_Statistic* Arena::CreateMaybeMessage<::tz::ServerStatistic_Statistic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tz {

enum ClientPacket_PacketType : int {
  ClientPacket_PacketType_DATA = 0,
  ClientPacket_PacketType_STATISTICS = 1,
  ClientPacket_PacketType_ClientPacket_PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientPacket_PacketType_ClientPacket_PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientPacket_PacketType_IsValid(int value);
constexpr ClientPacket_PacketType ClientPacket_PacketType_PacketType_MIN = ClientPacket_PacketType_DATA;
constexpr ClientPacket_PacketType ClientPacket_PacketType_PacketType_MAX = ClientPacket_PacketType_STATISTICS;
constexpr int ClientPacket_PacketType_PacketType_ARRAYSIZE = ClientPacket_PacketType_PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientPacket_PacketType_descriptor();
template<typename T>
inline const std::string& ClientPacket_PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientPacket_PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientPacket_PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientPacket_PacketType_descriptor(), enum_t_value);
}
inline bool ClientPacket_PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientPacket_PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientPacket_PacketType>(
    ClientPacket_PacketType_descriptor(), name, value);
}
// ===================================================================

class ClientPacket_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tz.ClientPacket.Data) */ {
 public:
  inline ClientPacket_Data() : ClientPacket_Data(nullptr) {}
  ~ClientPacket_Data() override;
  explicit constexpr ClientPacket_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientPacket_Data(const ClientPacket_Data& from);
  ClientPacket_Data(ClientPacket_Data&& from) noexcept
    : ClientPacket_Data() {
    *this = ::std::move(from);
  }

  inline ClientPacket_Data& operator=(const ClientPacket_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPacket_Data& operator=(ClientPacket_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientPacket_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPacket_Data* internal_default_instance() {
    return reinterpret_cast<const ClientPacket_Data*>(
               &_ClientPacket_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientPacket_Data& a, ClientPacket_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientPacket_Data* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPacket_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientPacket_Data* New() const final {
    return new ClientPacket_Data();
  }

  ClientPacket_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientPacket_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientPacket_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientPacket_Data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPacket_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tz.ClientPacket.Data";
  }
  protected:
  explicit ClientPacket_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string timestamp = 2;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_MUST_USE_RESULT std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // double x = 3;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 4;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:tz.ClientPacket.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tz_2eproto;
};
// -------------------------------------------------------------------

class ClientPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tz.ClientPacket) */ {
 public:
  inline ClientPacket() : ClientPacket(nullptr) {}
  ~ClientPacket() override;
  explicit constexpr ClientPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientPacket(const ClientPacket& from);
  ClientPacket(ClientPacket&& from) noexcept
    : ClientPacket() {
    *this = ::std::move(from);
  }

  inline ClientPacket& operator=(const ClientPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPacket& operator=(ClientPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPacket* internal_default_instance() {
    return reinterpret_cast<const ClientPacket*>(
               &_ClientPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientPacket& a, ClientPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientPacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientPacket* New() const final {
    return new ClientPacket();
  }

  ClientPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientPacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tz.ClientPacket";
  }
  protected:
  explicit ClientPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClientPacket_Data Data;

  typedef ClientPacket_PacketType PacketType;
  static constexpr PacketType DATA =
    ClientPacket_PacketType_DATA;
  static constexpr PacketType STATISTICS =
    ClientPacket_PacketType_STATISTICS;
  static inline bool PacketType_IsValid(int value) {
    return ClientPacket_PacketType_IsValid(value);
  }
  static constexpr PacketType PacketType_MIN =
    ClientPacket_PacketType_PacketType_MIN;
  static constexpr PacketType PacketType_MAX =
    ClientPacket_PacketType_PacketType_MAX;
  static constexpr int PacketType_ARRAYSIZE =
    ClientPacket_PacketType_PacketType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PacketType_descriptor() {
    return ClientPacket_PacketType_descriptor();
  }
  template<typename T>
  static inline const std::string& PacketType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PacketType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PacketType_Name.");
    return ClientPacket_PacketType_Name(enum_t_value);
  }
  static inline bool PacketType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PacketType* value) {
    return ClientPacket_PacketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional .tz.ClientPacket.Data data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::tz::ClientPacket_Data& data() const;
  PROTOBUF_MUST_USE_RESULT ::tz::ClientPacket_Data* release_data();
  ::tz::ClientPacket_Data* mutable_data();
  void set_allocated_data(::tz::ClientPacket_Data* data);
  private:
  const ::tz::ClientPacket_Data& _internal_data() const;
  ::tz::ClientPacket_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::tz::ClientPacket_Data* data);
  ::tz::ClientPacket_Data* unsafe_arena_release_data();

  // .tz.ClientPacket.PacketType type = 1;
  void clear_type();
  ::tz::ClientPacket_PacketType type() const;
  void set_type(::tz::ClientPacket_PacketType value);
  private:
  ::tz::ClientPacket_PacketType _internal_type() const;
  void _internal_set_type(::tz::ClientPacket_PacketType value);
  public:

  // @@protoc_insertion_point(class_scope:tz.ClientPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::tz::ClientPacket_Data* data_;
  int type_;
  friend struct ::TableStruct_tz_2eproto;
};
// -------------------------------------------------------------------

class ServerStatistic_Statistic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tz.ServerStatistic.Statistic) */ {
 public:
  inline ServerStatistic_Statistic() : ServerStatistic_Statistic(nullptr) {}
  ~ServerStatistic_Statistic() override;
  explicit constexpr ServerStatistic_Statistic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerStatistic_Statistic(const ServerStatistic_Statistic& from);
  ServerStatistic_Statistic(ServerStatistic_Statistic&& from) noexcept
    : ServerStatistic_Statistic() {
    *this = ::std::move(from);
  }

  inline ServerStatistic_Statistic& operator=(const ServerStatistic_Statistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerStatistic_Statistic& operator=(ServerStatistic_Statistic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerStatistic_Statistic& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerStatistic_Statistic* internal_default_instance() {
    return reinterpret_cast<const ServerStatistic_Statistic*>(
               &_ServerStatistic_Statistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerStatistic_Statistic& a, ServerStatistic_Statistic& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerStatistic_Statistic* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerStatistic_Statistic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerStatistic_Statistic* New() const final {
    return new ServerStatistic_Statistic();
  }

  ServerStatistic_Statistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerStatistic_Statistic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerStatistic_Statistic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerStatistic_Statistic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerStatistic_Statistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tz.ServerStatistic.Statistic";
  }
  protected:
  explicit ServerStatistic_Statistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kX1FieldNumber = 2,
    kY1FieldNumber = 3,
    kX5FieldNumber = 4,
    kY5FieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // double x1 = 2;
  void clear_x1();
  double x1() const;
  void set_x1(double value);
  private:
  double _internal_x1() const;
  void _internal_set_x1(double value);
  public:

  // double y1 = 3;
  void clear_y1();
  double y1() const;
  void set_y1(double value);
  private:
  double _internal_y1() const;
  void _internal_set_y1(double value);
  public:

  // double x5 = 4;
  void clear_x5();
  double x5() const;
  void set_x5(double value);
  private:
  double _internal_x5() const;
  void _internal_set_x5(double value);
  public:

  // double y5 = 5;
  void clear_y5();
  double y5() const;
  void set_y5(double value);
  private:
  double _internal_y5() const;
  void _internal_set_y5(double value);
  public:

  // @@protoc_insertion_point(class_scope:tz.ServerStatistic.Statistic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  double x1_;
  double y1_;
  double x5_;
  double y5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tz_2eproto;
};
// -------------------------------------------------------------------

class ServerStatistic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tz.ServerStatistic) */ {
 public:
  inline ServerStatistic() : ServerStatistic(nullptr) {}
  ~ServerStatistic() override;
  explicit constexpr ServerStatistic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerStatistic(const ServerStatistic& from);
  ServerStatistic(ServerStatistic&& from) noexcept
    : ServerStatistic() {
    *this = ::std::move(from);
  }

  inline ServerStatistic& operator=(const ServerStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerStatistic& operator=(ServerStatistic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerStatistic& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerStatistic* internal_default_instance() {
    return reinterpret_cast<const ServerStatistic*>(
               &_ServerStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerStatistic& a, ServerStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerStatistic* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerStatistic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerStatistic* New() const final {
    return new ServerStatistic();
  }

  ServerStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerStatistic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerStatistic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerStatistic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerStatistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tz.ServerStatistic";
  }
  protected:
  explicit ServerStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerStatistic_Statistic Statistic;

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
  };
  // repeated .tz.ServerStatistic.Statistic client = 1;
  int client_size() const;
  private:
  int _internal_client_size() const;
  public:
  void clear_client();
  ::tz::ServerStatistic_Statistic* mutable_client(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tz::ServerStatistic_Statistic >*
      mutable_client();
  private:
  const ::tz::ServerStatistic_Statistic& _internal_client(int index) const;
  ::tz::ServerStatistic_Statistic* _internal_add_client();
  public:
  const ::tz::ServerStatistic_Statistic& client(int index) const;
  ::tz::ServerStatistic_Statistic* add_client();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tz::ServerStatistic_Statistic >&
      client() const;

  // @@protoc_insertion_point(class_scope:tz.ServerStatistic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tz::ServerStatistic_Statistic > client_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tz_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientPacket_Data

// string uuid = 1;
inline void ClientPacket_Data::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& ClientPacket_Data::uuid() const {
  // @@protoc_insertion_point(field_get:tz.ClientPacket.Data.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientPacket_Data::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tz.ClientPacket.Data.uuid)
}
inline std::string* ClientPacket_Data::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:tz.ClientPacket.Data.uuid)
  return _s;
}
inline const std::string& ClientPacket_Data::_internal_uuid() const {
  return uuid_.Get();
}
inline void ClientPacket_Data::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientPacket_Data::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientPacket_Data::release_uuid() {
  // @@protoc_insertion_point(field_release:tz.ClientPacket.Data.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClientPacket_Data::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tz.ClientPacket.Data.uuid)
}

// string timestamp = 2;
inline void ClientPacket_Data::clear_timestamp() {
  timestamp_.ClearToEmpty();
}
inline const std::string& ClientPacket_Data::timestamp() const {
  // @@protoc_insertion_point(field_get:tz.ClientPacket.Data.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientPacket_Data::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tz.ClientPacket.Data.timestamp)
}
inline std::string* ClientPacket_Data::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:tz.ClientPacket.Data.timestamp)
  return _s;
}
inline const std::string& ClientPacket_Data::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void ClientPacket_Data::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ClientPacket_Data::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ClientPacket_Data::release_timestamp() {
  // @@protoc_insertion_point(field_release:tz.ClientPacket.Data.timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ClientPacket_Data::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tz.ClientPacket.Data.timestamp)
}

// double x = 3;
inline void ClientPacket_Data::clear_x() {
  x_ = 0;
}
inline double ClientPacket_Data::_internal_x() const {
  return x_;
}
inline double ClientPacket_Data::x() const {
  // @@protoc_insertion_point(field_get:tz.ClientPacket.Data.x)
  return _internal_x();
}
inline void ClientPacket_Data::_internal_set_x(double value) {
  
  x_ = value;
}
inline void ClientPacket_Data::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:tz.ClientPacket.Data.x)
}

// double y = 4;
inline void ClientPacket_Data::clear_y() {
  y_ = 0;
}
inline double ClientPacket_Data::_internal_y() const {
  return y_;
}
inline double ClientPacket_Data::y() const {
  // @@protoc_insertion_point(field_get:tz.ClientPacket.Data.y)
  return _internal_y();
}
inline void ClientPacket_Data::_internal_set_y(double value) {
  
  y_ = value;
}
inline void ClientPacket_Data::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:tz.ClientPacket.Data.y)
}

// -------------------------------------------------------------------

// ClientPacket

// .tz.ClientPacket.PacketType type = 1;
inline void ClientPacket::clear_type() {
  type_ = 0;
}
inline ::tz::ClientPacket_PacketType ClientPacket::_internal_type() const {
  return static_cast< ::tz::ClientPacket_PacketType >(type_);
}
inline ::tz::ClientPacket_PacketType ClientPacket::type() const {
  // @@protoc_insertion_point(field_get:tz.ClientPacket.type)
  return _internal_type();
}
inline void ClientPacket::_internal_set_type(::tz::ClientPacket_PacketType value) {
  
  type_ = value;
}
inline void ClientPacket::set_type(::tz::ClientPacket_PacketType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tz.ClientPacket.type)
}

// optional .tz.ClientPacket.Data data = 2;
inline bool ClientPacket::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool ClientPacket::has_data() const {
  return _internal_has_data();
}
inline void ClientPacket::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::tz::ClientPacket_Data& ClientPacket::_internal_data() const {
  const ::tz::ClientPacket_Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::tz::ClientPacket_Data&>(
      ::tz::_ClientPacket_Data_default_instance_);
}
inline const ::tz::ClientPacket_Data& ClientPacket::data() const {
  // @@protoc_insertion_point(field_get:tz.ClientPacket.data)
  return _internal_data();
}
inline void ClientPacket::unsafe_arena_set_allocated_data(
    ::tz::ClientPacket_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tz.ClientPacket.data)
}
inline ::tz::ClientPacket_Data* ClientPacket::release_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::tz::ClientPacket_Data* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tz::ClientPacket_Data* ClientPacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:tz.ClientPacket.data)
  _has_bits_[0] &= ~0x00000001u;
  ::tz::ClientPacket_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::tz::ClientPacket_Data* ClientPacket::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::tz::ClientPacket_Data>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::tz::ClientPacket_Data* ClientPacket::mutable_data() {
  ::tz::ClientPacket_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tz.ClientPacket.data)
  return _msg;
}
inline void ClientPacket::set_allocated_data(::tz::ClientPacket_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tz::ClientPacket_Data>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:tz.ClientPacket.data)
}

// -------------------------------------------------------------------

// ServerStatistic_Statistic

// string uuid = 1;
inline void ServerStatistic_Statistic::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& ServerStatistic_Statistic::uuid() const {
  // @@protoc_insertion_point(field_get:tz.ServerStatistic.Statistic.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerStatistic_Statistic::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tz.ServerStatistic.Statistic.uuid)
}
inline std::string* ServerStatistic_Statistic::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:tz.ServerStatistic.Statistic.uuid)
  return _s;
}
inline const std::string& ServerStatistic_Statistic::_internal_uuid() const {
  return uuid_.Get();
}
inline void ServerStatistic_Statistic::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerStatistic_Statistic::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerStatistic_Statistic::release_uuid() {
  // @@protoc_insertion_point(field_release:tz.ServerStatistic.Statistic.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServerStatistic_Statistic::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tz.ServerStatistic.Statistic.uuid)
}

// double x1 = 2;
inline void ServerStatistic_Statistic::clear_x1() {
  x1_ = 0;
}
inline double ServerStatistic_Statistic::_internal_x1() const {
  return x1_;
}
inline double ServerStatistic_Statistic::x1() const {
  // @@protoc_insertion_point(field_get:tz.ServerStatistic.Statistic.x1)
  return _internal_x1();
}
inline void ServerStatistic_Statistic::_internal_set_x1(double value) {
  
  x1_ = value;
}
inline void ServerStatistic_Statistic::set_x1(double value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:tz.ServerStatistic.Statistic.x1)
}

// double y1 = 3;
inline void ServerStatistic_Statistic::clear_y1() {
  y1_ = 0;
}
inline double ServerStatistic_Statistic::_internal_y1() const {
  return y1_;
}
inline double ServerStatistic_Statistic::y1() const {
  // @@protoc_insertion_point(field_get:tz.ServerStatistic.Statistic.y1)
  return _internal_y1();
}
inline void ServerStatistic_Statistic::_internal_set_y1(double value) {
  
  y1_ = value;
}
inline void ServerStatistic_Statistic::set_y1(double value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:tz.ServerStatistic.Statistic.y1)
}

// double x5 = 4;
inline void ServerStatistic_Statistic::clear_x5() {
  x5_ = 0;
}
inline double ServerStatistic_Statistic::_internal_x5() const {
  return x5_;
}
inline double ServerStatistic_Statistic::x5() const {
  // @@protoc_insertion_point(field_get:tz.ServerStatistic.Statistic.x5)
  return _internal_x5();
}
inline void ServerStatistic_Statistic::_internal_set_x5(double value) {
  
  x5_ = value;
}
inline void ServerStatistic_Statistic::set_x5(double value) {
  _internal_set_x5(value);
  // @@protoc_insertion_point(field_set:tz.ServerStatistic.Statistic.x5)
}

// double y5 = 5;
inline void ServerStatistic_Statistic::clear_y5() {
  y5_ = 0;
}
inline double ServerStatistic_Statistic::_internal_y5() const {
  return y5_;
}
inline double ServerStatistic_Statistic::y5() const {
  // @@protoc_insertion_point(field_get:tz.ServerStatistic.Statistic.y5)
  return _internal_y5();
}
inline void ServerStatistic_Statistic::_internal_set_y5(double value) {
  
  y5_ = value;
}
inline void ServerStatistic_Statistic::set_y5(double value) {
  _internal_set_y5(value);
  // @@protoc_insertion_point(field_set:tz.ServerStatistic.Statistic.y5)
}

// -------------------------------------------------------------------

// ServerStatistic

// repeated .tz.ServerStatistic.Statistic client = 1;
inline int ServerStatistic::_internal_client_size() const {
  return client_.size();
}
inline int ServerStatistic::client_size() const {
  return _internal_client_size();
}
inline void ServerStatistic::clear_client() {
  client_.Clear();
}
inline ::tz::ServerStatistic_Statistic* ServerStatistic::mutable_client(int index) {
  // @@protoc_insertion_point(field_mutable:tz.ServerStatistic.client)
  return client_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tz::ServerStatistic_Statistic >*
ServerStatistic::mutable_client() {
  // @@protoc_insertion_point(field_mutable_list:tz.ServerStatistic.client)
  return &client_;
}
inline const ::tz::ServerStatistic_Statistic& ServerStatistic::_internal_client(int index) const {
  return client_.Get(index);
}
inline const ::tz::ServerStatistic_Statistic& ServerStatistic::client(int index) const {
  // @@protoc_insertion_point(field_get:tz.ServerStatistic.client)
  return _internal_client(index);
}
inline ::tz::ServerStatistic_Statistic* ServerStatistic::_internal_add_client() {
  return client_.Add();
}
inline ::tz::ServerStatistic_Statistic* ServerStatistic::add_client() {
  ::tz::ServerStatistic_Statistic* _add = _internal_add_client();
  // @@protoc_insertion_point(field_add:tz.ServerStatistic.client)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tz::ServerStatistic_Statistic >&
ServerStatistic::client() const {
  // @@protoc_insertion_point(field_list:tz.ServerStatistic.client)
  return client_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tz

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tz::ClientPacket_PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tz::ClientPacket_PacketType>() {
  return ::tz::ClientPacket_PacketType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tz_2eproto
