// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tz.proto

#include "tz.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tz {
constexpr ClientPacket_Data::ClientPacket_Data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(int64_t{0})
  , x_(0)
  , y_(0){}
struct ClientPacket_DataDefaultTypeInternal {
  constexpr ClientPacket_DataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientPacket_DataDefaultTypeInternal() {}
  union {
    ClientPacket_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientPacket_DataDefaultTypeInternal _ClientPacket_Data_default_instance_;
constexpr ClientPacket::ClientPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr)
  , type_(0)
{}
struct ClientPacketDefaultTypeInternal {
  constexpr ClientPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientPacketDefaultTypeInternal() {}
  union {
    ClientPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientPacketDefaultTypeInternal _ClientPacket_default_instance_;
constexpr ServerStatistic_Statistic::ServerStatistic_Statistic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x1_(0)
  , y1_(0)
  , x5_(0)
  , y5_(0){}
struct ServerStatistic_StatisticDefaultTypeInternal {
  constexpr ServerStatistic_StatisticDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerStatistic_StatisticDefaultTypeInternal() {}
  union {
    ServerStatistic_Statistic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerStatistic_StatisticDefaultTypeInternal _ServerStatistic_Statistic_default_instance_;
constexpr ServerStatistic::ServerStatistic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_(){}
struct ServerStatisticDefaultTypeInternal {
  constexpr ServerStatisticDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerStatisticDefaultTypeInternal() {}
  union {
    ServerStatistic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerStatisticDefaultTypeInternal _ServerStatistic_default_instance_;
}  // namespace tz
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tz_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tz_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tz_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tz::ClientPacket_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tz::ClientPacket_Data, uuid_),
  PROTOBUF_FIELD_OFFSET(::tz::ClientPacket_Data, timestamp_),
  PROTOBUF_FIELD_OFFSET(::tz::ClientPacket_Data, x_),
  PROTOBUF_FIELD_OFFSET(::tz::ClientPacket_Data, y_),
  PROTOBUF_FIELD_OFFSET(::tz::ClientPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tz::ClientPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tz::ClientPacket, type_),
  PROTOBUF_FIELD_OFFSET(::tz::ClientPacket, data_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tz::ServerStatistic_Statistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tz::ServerStatistic_Statistic, uuid_),
  PROTOBUF_FIELD_OFFSET(::tz::ServerStatistic_Statistic, x1_),
  PROTOBUF_FIELD_OFFSET(::tz::ServerStatistic_Statistic, y1_),
  PROTOBUF_FIELD_OFFSET(::tz::ServerStatistic_Statistic, x5_),
  PROTOBUF_FIELD_OFFSET(::tz::ServerStatistic_Statistic, y5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tz::ServerStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tz::ServerStatistic, client_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tz::ClientPacket_Data)},
  { 10, 18, -1, sizeof(::tz::ClientPacket)},
  { 20, -1, -1, sizeof(::tz::ServerStatistic_Statistic)},
  { 31, -1, -1, sizeof(::tz::ServerStatistic)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tz::_ClientPacket_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tz::_ClientPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tz::_ServerStatistic_Statistic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tz::_ServerStatistic_default_instance_),
};

const char descriptor_table_protodef_tz_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010tz.proto\022\002tz\"\323\001\n\014ClientPacket\022)\n\004type\030"
  "\001 \001(\0162\033.tz.ClientPacket.PacketType\022(\n\004da"
  "ta\030\002 \001(\0132\025.tz.ClientPacket.DataH\000\210\001\001\032=\n\004"
  "Data\022\014\n\004uuid\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\003\022\t\n"
  "\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\"&\n\nPacketType\022\010\n\004DAT"
  "A\020\000\022\016\n\nSTATISTICS\020\001B\007\n\005_data\"\213\001\n\017ServerS"
  "tatistic\022-\n\006client\030\001 \003(\0132\035.tz.ServerStat"
  "istic.Statistic\032I\n\tStatistic\022\014\n\004uuid\030\001 \001"
  "(\t\022\n\n\002x1\030\002 \001(\001\022\n\n\002y1\030\003 \001(\001\022\n\n\002x5\030\004 \001(\001\022\n"
  "\n\002y5\030\005 \001(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tz_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tz_2eproto = {
  false, false, 378, descriptor_table_protodef_tz_2eproto, "tz.proto", 
  &descriptor_table_tz_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_tz_2eproto::offsets,
  file_level_metadata_tz_2eproto, file_level_enum_descriptors_tz_2eproto, file_level_service_descriptors_tz_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tz_2eproto_getter() {
  return &descriptor_table_tz_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tz_2eproto(&descriptor_table_tz_2eproto);
namespace tz {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientPacket_PacketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tz_2eproto);
  return file_level_enum_descriptors_tz_2eproto[0];
}
bool ClientPacket_PacketType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientPacket_PacketType ClientPacket::DATA;
constexpr ClientPacket_PacketType ClientPacket::STATISTICS;
constexpr ClientPacket_PacketType ClientPacket::PacketType_MIN;
constexpr ClientPacket_PacketType ClientPacket::PacketType_MAX;
constexpr int ClientPacket::PacketType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ClientPacket_Data::_Internal {
 public:
};

ClientPacket_Data::ClientPacket_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tz.ClientPacket.Data)
}
ClientPacket_Data::ClientPacket_Data(const ClientPacket_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:tz.ClientPacket.Data)
}

void ClientPacket_Data::SharedCtor() {
uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(y_));
}

ClientPacket_Data::~ClientPacket_Data() {
  // @@protoc_insertion_point(destructor:tz.ClientPacket.Data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientPacket_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientPacket_Data::ArenaDtor(void* object) {
  ClientPacket_Data* _this = reinterpret_cast< ClientPacket_Data* >(object);
  (void)_this;
}
void ClientPacket_Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientPacket_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientPacket_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:tz.ClientPacket.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPacket_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tz.ClientPacket.Data.uuid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientPacket_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tz.ClientPacket.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tz.ClientPacket.Data.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // double x = 3;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_x(), target);
  }

  // double y = 4;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tz.ClientPacket.Data)
  return target;
}

size_t ClientPacket_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tz.ClientPacket.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // double x = 3;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 4;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPacket_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientPacket_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPacket_Data::GetClassData() const { return &_class_data_; }

void ClientPacket_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientPacket_Data *>(to)->MergeFrom(
      static_cast<const ClientPacket_Data &>(from));
}


void ClientPacket_Data::MergeFrom(const ClientPacket_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tz.ClientPacket.Data)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPacket_Data::CopyFrom(const ClientPacket_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tz.ClientPacket.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPacket_Data::IsInitialized() const {
  return true;
}

void ClientPacket_Data::InternalSwap(ClientPacket_Data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uuid_, lhs_arena,
      &other->uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPacket_Data, y_)
      + sizeof(ClientPacket_Data::y_)
      - PROTOBUF_FIELD_OFFSET(ClientPacket_Data, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPacket_Data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tz_2eproto_getter, &descriptor_table_tz_2eproto_once,
      file_level_metadata_tz_2eproto[0]);
}

// ===================================================================

class ClientPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientPacket>()._has_bits_);
  static const ::tz::ClientPacket_Data& data(const ClientPacket* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tz::ClientPacket_Data&
ClientPacket::_Internal::data(const ClientPacket* msg) {
  return *msg->data_;
}
ClientPacket::ClientPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tz.ClientPacket)
}
ClientPacket::ClientPacket(const ClientPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::tz::ClientPacket_Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:tz.ClientPacket)
}

void ClientPacket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&data_)) + sizeof(type_));
}

ClientPacket::~ClientPacket() {
  // @@protoc_insertion_point(destructor:tz.ClientPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClientPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void ClientPacket::ArenaDtor(void* object) {
  ClientPacket* _this = reinterpret_cast< ClientPacket* >(object);
  (void)_this;
}
void ClientPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:tz.ClientPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tz.ClientPacket.PacketType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tz::ClientPacket_PacketType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .tz.ClientPacket.Data data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tz.ClientPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tz.ClientPacket.PacketType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .tz.ClientPacket.Data data = 2;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tz.ClientPacket)
  return target;
}

size_t ClientPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tz.ClientPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .tz.ClientPacket.Data data = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .tz.ClientPacket.PacketType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClientPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPacket::GetClassData() const { return &_class_data_; }

void ClientPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClientPacket *>(to)->MergeFrom(
      static_cast<const ClientPacket &>(from));
}


void ClientPacket::MergeFrom(const ClientPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tz.ClientPacket)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::tz::ClientPacket_Data::MergeFrom(from._internal_data());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPacket::CopyFrom(const ClientPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tz.ClientPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPacket::IsInitialized() const {
  return true;
}

void ClientPacket::InternalSwap(ClientPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientPacket, type_)
      + sizeof(ClientPacket::type_)
      - PROTOBUF_FIELD_OFFSET(ClientPacket, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tz_2eproto_getter, &descriptor_table_tz_2eproto_once,
      file_level_metadata_tz_2eproto[1]);
}

// ===================================================================

class ServerStatistic_Statistic::_Internal {
 public:
};

ServerStatistic_Statistic::ServerStatistic_Statistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tz.ServerStatistic.Statistic)
}
ServerStatistic_Statistic::ServerStatistic_Statistic(const ServerStatistic_Statistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x1_, &from.x1_,
    static_cast<size_t>(reinterpret_cast<char*>(&y5_) -
    reinterpret_cast<char*>(&x1_)) + sizeof(y5_));
  // @@protoc_insertion_point(copy_constructor:tz.ServerStatistic.Statistic)
}

void ServerStatistic_Statistic::SharedCtor() {
uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y5_) -
    reinterpret_cast<char*>(&x1_)) + sizeof(y5_));
}

ServerStatistic_Statistic::~ServerStatistic_Statistic() {
  // @@protoc_insertion_point(destructor:tz.ServerStatistic.Statistic)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerStatistic_Statistic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerStatistic_Statistic::ArenaDtor(void* object) {
  ServerStatistic_Statistic* _this = reinterpret_cast< ServerStatistic_Statistic* >(object);
  (void)_this;
}
void ServerStatistic_Statistic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerStatistic_Statistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerStatistic_Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:tz.ServerStatistic.Statistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty();
  ::memset(&x1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y5_) -
      reinterpret_cast<char*>(&x1_)) + sizeof(y5_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerStatistic_Statistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tz.ServerStatistic.Statistic.uuid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double x1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          x1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          y1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double x5 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          x5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          y5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerStatistic_Statistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tz.ServerStatistic.Statistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tz.ServerStatistic.Statistic.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // double x1 = 2;
  if (!(this->_internal_x1() <= 0 && this->_internal_x1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_x1(), target);
  }

  // double y1 = 3;
  if (!(this->_internal_y1() <= 0 && this->_internal_y1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_y1(), target);
  }

  // double x5 = 4;
  if (!(this->_internal_x5() <= 0 && this->_internal_x5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_x5(), target);
  }

  // double y5 = 5;
  if (!(this->_internal_y5() <= 0 && this->_internal_y5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_y5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tz.ServerStatistic.Statistic)
  return target;
}

size_t ServerStatistic_Statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tz.ServerStatistic.Statistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // double x1 = 2;
  if (!(this->_internal_x1() <= 0 && this->_internal_x1() >= 0)) {
    total_size += 1 + 8;
  }

  // double y1 = 3;
  if (!(this->_internal_y1() <= 0 && this->_internal_y1() >= 0)) {
    total_size += 1 + 8;
  }

  // double x5 = 4;
  if (!(this->_internal_x5() <= 0 && this->_internal_x5() >= 0)) {
    total_size += 1 + 8;
  }

  // double y5 = 5;
  if (!(this->_internal_y5() <= 0 && this->_internal_y5() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerStatistic_Statistic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerStatistic_Statistic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerStatistic_Statistic::GetClassData() const { return &_class_data_; }

void ServerStatistic_Statistic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerStatistic_Statistic *>(to)->MergeFrom(
      static_cast<const ServerStatistic_Statistic &>(from));
}


void ServerStatistic_Statistic::MergeFrom(const ServerStatistic_Statistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tz.ServerStatistic.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (!(from._internal_x1() <= 0 && from._internal_x1() >= 0)) {
    _internal_set_x1(from._internal_x1());
  }
  if (!(from._internal_y1() <= 0 && from._internal_y1() >= 0)) {
    _internal_set_y1(from._internal_y1());
  }
  if (!(from._internal_x5() <= 0 && from._internal_x5() >= 0)) {
    _internal_set_x5(from._internal_x5());
  }
  if (!(from._internal_y5() <= 0 && from._internal_y5() >= 0)) {
    _internal_set_y5(from._internal_y5());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerStatistic_Statistic::CopyFrom(const ServerStatistic_Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tz.ServerStatistic.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatistic_Statistic::IsInitialized() const {
  return true;
}

void ServerStatistic_Statistic::InternalSwap(ServerStatistic_Statistic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uuid_, lhs_arena,
      &other->uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerStatistic_Statistic, y5_)
      + sizeof(ServerStatistic_Statistic::y5_)
      - PROTOBUF_FIELD_OFFSET(ServerStatistic_Statistic, x1_)>(
          reinterpret_cast<char*>(&x1_),
          reinterpret_cast<char*>(&other->x1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerStatistic_Statistic::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tz_2eproto_getter, &descriptor_table_tz_2eproto_once,
      file_level_metadata_tz_2eproto[2]);
}

// ===================================================================

class ServerStatistic::_Internal {
 public:
};

ServerStatistic::ServerStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  client_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tz.ServerStatistic)
}
ServerStatistic::ServerStatistic(const ServerStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      client_(from.client_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tz.ServerStatistic)
}

void ServerStatistic::SharedCtor() {
}

ServerStatistic::~ServerStatistic() {
  // @@protoc_insertion_point(destructor:tz.ServerStatistic)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerStatistic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerStatistic::ArenaDtor(void* object) {
  ServerStatistic* _this = reinterpret_cast< ServerStatistic* >(object);
  (void)_this;
}
void ServerStatistic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerStatistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:tz.ServerStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerStatistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tz.ServerStatistic.Statistic client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_client(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerStatistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tz.ServerStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tz.ServerStatistic.Statistic client = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_client_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_client(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tz.ServerStatistic)
  return target;
}

size_t ServerStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tz.ServerStatistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tz.ServerStatistic.Statistic client = 1;
  total_size += 1UL * this->_internal_client_size();
  for (const auto& msg : this->client_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerStatistic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerStatistic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerStatistic::GetClassData() const { return &_class_data_; }

void ServerStatistic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerStatistic *>(to)->MergeFrom(
      static_cast<const ServerStatistic &>(from));
}


void ServerStatistic::MergeFrom(const ServerStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tz.ServerStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  client_.MergeFrom(from.client_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerStatistic::CopyFrom(const ServerStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tz.ServerStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatistic::IsInitialized() const {
  return true;
}

void ServerStatistic::InternalSwap(ServerStatistic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  client_.InternalSwap(&other->client_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerStatistic::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tz_2eproto_getter, &descriptor_table_tz_2eproto_once,
      file_level_metadata_tz_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tz
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tz::ClientPacket_Data* Arena::CreateMaybeMessage< ::tz::ClientPacket_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tz::ClientPacket_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::tz::ClientPacket* Arena::CreateMaybeMessage< ::tz::ClientPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tz::ClientPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::tz::ServerStatistic_Statistic* Arena::CreateMaybeMessage< ::tz::ServerStatistic_Statistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tz::ServerStatistic_Statistic >(arena);
}
template<> PROTOBUF_NOINLINE ::tz::ServerStatistic* Arena::CreateMaybeMessage< ::tz::ServerStatistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tz::ServerStatistic >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
